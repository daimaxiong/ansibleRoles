---
- name: Exclude distro repo defaults
  ini_file:
    path: /etc/yum.repos.d/fedora.repo
    section: fedora
    option: exclude
    value: postgresql*
    backup: no
  tags: 
    - postgresql
    - configuration
    
- name: Exclude distro repo-update defaults    
  ini_file:
    path: /etc/yum.repos.d/fedora-updates.repo
    section: updates
    option: exclude
    value: postgresql*
    backup: no  
  tags: 
    - postgresql
    - configuration

- name: Install Postgresql repo
  dnf:
    name: "{{ postgresql.repo }}"
    state: present
  tags:
    - postgresql
    - postgresql_basic

- name: Install Postgresql
  dnf:
    name:
      "{{ postgresql.components }}"
    state: present
    
  tags:
    - postgresql
    - postgresql_basic

- name: Check if postgresgl has been initialized
  stat:
    path: "{{ postgresql.data_path }}"
  register: stat_result

- name: Initialize Postgresql if not yet initialized
  command: "{{ postgresql.initialization_command }}"
  when: stat_result.stat.exists
  tags:
    - postgresql
    - postgresql_basic

- name: Start and enable Postgresql
  service:
    name: "{{ postgresql.service_name }}"
    state: started
    enabled: true
  tags:
    - postgresql
    - postgresql_basic

- name: Install psycopg2 to enable use of postgresql_db et al.
  dnf:
    name: python3-psycopg2
    state: present
    
  tags:
    - postgresql
    - postgresql_db

- name: Host Based Acces configuration (hba)
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql.data_path }}/pg_hba.conf"
    owner: postgres
    group: postgres
    setype: postgresql_db_t
    mode: '0644'
  notify: restart postgresql
  tags:
    - postgresql
    - postgresql_db
    - postgresql_hba

- name: Create Database
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ postgresql.db }}"
  tags:
    - postgresql
    - postgresql_db

- name: Create Schema
  become: yes
  become_user: postgres
  postgresql_schema:
    database: "{{ postgresql.db }}"
    name: "{{ postgresql.schema }}"

  tags:
    - postgresql
    - postgresql_db

- name: Create User
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ postgresql.db }}"
    name: "{{ postgresql.user}}"
    password: "{{ postgresql.password }}"
    role_attr_flags: "SUPERUSER"
    priv: ALL
    expires: infinity
  tags:
    - postgresql
    - postgresql_db
    - postgresql_user

#- name: Grant user privileges
#  become: yes
#  become_user: postgres
#  postgresql_privs:
#    database: "{{ postgresql.db }}"
#    state: present
#    privs: ALL
#    type: database
#    roles: "{{ postgresql.user }}"
#    grant_option: yes
#  tags:
#    - postgresql
#    - postgresql_db
#    - postgresql_user
#    - postgresql_privs
